/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as CartIndexImport } from './routes/cart/index'
import { Route as UserProfileImport } from './routes/user/profile'
import { Route as UserLoginImport } from './routes/user/login'
import { Route as ProductsIdImport } from './routes/products/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const CartIndexRoute = CartIndexImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRoute,
} as any)

const UserProfileRoute = UserProfileImport.update({
  id: '/user/profile',
  path: '/user/profile',
  getParentRoute: () => rootRoute,
} as any)

const UserLoginRoute = UserLoginImport.update({
  id: '/user/login',
  path: '/user/login',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIdRoute = ProductsIdImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdImport
      parentRoute: typeof rootRoute
    }
    '/user/login': {
      id: '/user/login'
      path: '/user/login'
      fullPath: '/user/login'
      preLoaderRoute: typeof UserLoginImport
      parentRoute: typeof rootRoute
    }
    '/user/profile': {
      id: '/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserProfileImport
      parentRoute: typeof rootRoute
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products/$id': typeof ProductsIdRoute
  '/user/login': typeof UserLoginRoute
  '/user/profile': typeof UserProfileRoute
  '/cart': typeof CartIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products/$id': typeof ProductsIdRoute
  '/user/login': typeof UserLoginRoute
  '/user/profile': typeof UserProfileRoute
  '/cart': typeof CartIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/products/$id': typeof ProductsIdRoute
  '/user/login': typeof UserLoginRoute
  '/user/profile': typeof UserProfileRoute
  '/cart/': typeof CartIndexRoute
  '/products/': typeof ProductsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products/$id'
    | '/user/login'
    | '/user/profile'
    | '/cart'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/products/$id'
    | '/user/login'
    | '/user/profile'
    | '/cart'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/products/$id'
    | '/user/login'
    | '/user/profile'
    | '/cart/'
    | '/products/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsIdRoute: typeof ProductsIdRoute
  UserLoginRoute: typeof UserLoginRoute
  UserProfileRoute: typeof UserProfileRoute
  CartIndexRoute: typeof CartIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsIdRoute: ProductsIdRoute,
  UserLoginRoute: UserLoginRoute,
  UserProfileRoute: UserProfileRoute,
  CartIndexRoute: CartIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/products/$id",
        "/user/login",
        "/user/profile",
        "/cart/",
        "/products/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/products/$id": {
      "filePath": "products/$id.tsx"
    },
    "/user/login": {
      "filePath": "user/login.tsx"
    },
    "/user/profile": {
      "filePath": "user/profile.tsx"
    },
    "/cart/": {
      "filePath": "cart/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
